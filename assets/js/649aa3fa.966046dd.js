"use strict";(self.webpackChunkeeacom_docs=self.webpackChunkeeacom_docs||[]).push([[1756],{1150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(4848),i=n(8453);const o={title:"Defining Base Types in EEA COM: Categories, Encoding, and Memory Alignment",description:"Discover how to define base types in EEA COM, including options for category, base type encoding, and memory alignment. Learn about byte order configurations and native declaration types for enhanced control over ECU data structures.",keywords:["Base Type","EEA COM","Fixed Length","Base Type Encoding","Byte Order","Memory Alignment","AUTOSAR","Native Declaration","ECU Data Types","Signed and Unsigned"],sidebar_position:4,sidebar_label:"Base Type"},s="7.4  Base Type",r={id:"data-types/base-type",title:"Defining Base Types in EEA COM: Categories, Encoding, and Memory Alignment",description:"Discover how to define base types in EEA COM, including options for category, base type encoding, and memory alignment. Learn about byte order configurations and native declaration types for enhanced control over ECU data structures.",source:"@site/docs/data-types/base-type.md",sourceDirName:"data-types",slug:"/data-types/base-type",permalink:"/data-types/base-type",draft:!1,unlisted:!1,editUrl:"https://github.com/intrepidcs/eeacom-docs/blob/main/docs/data-types/base-type.md",tags:[],version:"current",lastUpdatedAt:1728649695e3,sidebarPosition:4,frontMatter:{title:"Defining Base Types in EEA COM: Categories, Encoding, and Memory Alignment",description:"Discover how to define base types in EEA COM, including options for category, base type encoding, and memory alignment. Learn about byte order configurations and native declaration types for enhanced control over ECU data structures.",keywords:["Base Type","EEA COM","Fixed Length","Base Type Encoding","Byte Order","Memory Alignment","AUTOSAR","Native Declaration","ECU Data Types","Signed and Unsigned"],sidebar_position:4,sidebar_label:"Base Type"},sidebar:"tutorialSidebar",previous:{title:"Compute Method",permalink:"/data-types/compute-method"},next:{title:"Implementation Data Type",permalink:"/data-types/implementation-data-types"}},d={},c=[];function p(e){const t={h1:"h1",header:"header",img:"img",p:"p",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"74--base-type",children:"7.4  Base Type"})}),"\n",(0,a.jsx)(t.p,{children:"Add Base Type\u2192 Short Name \u2192 Category(VOID, FIXED_LENGTH) \u2192  Base Type Encoding\u2192 Base Type Size(bits) \u2192 Byte Order (MOSTSIGNIFICANTBYTEFIRST, MOSTSIGNIFICANTBYTELAST, OPAQUE)\u2192 Max Base Type Size(bits)\u2192 Memory Alignment (0,8 and 32)\u2192 Native Declaration (Signed Short , Unsigned Short , Signed Long, Unsigned Long,  Signed Char , Unsigned Char, Float and double)\u2192 Save."}),"\n",(0,a.jsx)("div",{class:"text--center",children:(0,a.jsx)("figure",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.img,{alt:"Base Type",src:n(7398).A+"",title:"- Base Type",width:"1437",height:"553"}),"\r\n",(0,a.jsx)("figcaption",{children:"Fig. Base Type"})]})})})]})}function y(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},7398:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/image50-fa8eba80e9c8190b62a5fb5138ed3879.webp"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(6540);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);