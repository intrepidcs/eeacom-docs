"use strict";(self.webpackChunkeeacom_docs=self.webpackChunkeeacom_docs||[]).push([[9441],{2916:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(4848),a=n(8453);const i={title:"Ethernet Frame Configuration in AUTOSAR ARXML - PDU and Data Structure Management",description:"Configure Ethernet Frames in AUTOSAR ARXML files by defining short names and lengths. Manage PDUs by selecting types, specifying packing byte orders, and updating indication positions. Understand the structure of Ethernet frames, including headers, data, and Frame Check Sequence (FCS), for effective communication in networked environments.",keywords:["Ethernet Frames","AUTOSAR ARXML","MAC Addresses","Frame Check Sequence","PDU","Packing Byte Order","Short Name","Frame Length"],sidebar_position:6,sidebar_label:"Ethernet Frames"},s="4.6 Ethernet Frames",o={id:"frames/ethernet-frames",title:"Ethernet Frame Configuration in AUTOSAR ARXML - PDU and Data Structure Management",description:"Configure Ethernet Frames in AUTOSAR ARXML files by defining short names and lengths. Manage PDUs by selecting types, specifying packing byte orders, and updating indication positions. Understand the structure of Ethernet frames, including headers, data, and Frame Check Sequence (FCS), for effective communication in networked environments.",source:"@site/docs/frames/ethernet-frames.md",sourceDirName:"frames",slug:"/frames/ethernet-frames",permalink:"/frames/ethernet-frames",draft:!1,unlisted:!1,editUrl:"https://github.com/intrepidcs/eeacom-docs/blob/main/docs/frames/ethernet-frames.md",tags:[],version:"current",lastUpdatedAt:1728649695e3,sidebarPosition:6,frontMatter:{title:"Ethernet Frame Configuration in AUTOSAR ARXML - PDU and Data Structure Management",description:"Configure Ethernet Frames in AUTOSAR ARXML files by defining short names and lengths. Manage PDUs by selecting types, specifying packing byte orders, and updating indication positions. Understand the structure of Ethernet frames, including headers, data, and Frame Check Sequence (FCS), for effective communication in networked environments.",keywords:["Ethernet Frames","AUTOSAR ARXML","MAC Addresses","Frame Check Sequence","PDU","Packing Byte Order","Short Name","Frame Length"],sidebar_position:6,sidebar_label:"Ethernet Frames"},sidebar:"tutorialSidebar",previous:{title:"FlexRay Frames",permalink:"/frames/flexray-frames"},next:{title:"PDUs (Protocol Data Units)",permalink:"/pdus/"}},d={},c=[];function m(e){const t={h1:"h1",header:"header",img:"img",li:"li",ol:"ol",p:"p",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"46-ethernet-frames",children:"4.6 Ethernet Frames"})}),"\n",(0,r.jsx)(t.p,{children:"An Ethernet frame starts with a header, which contains the source and destination MAC addresses, among other data. The middle part of the frame is the actual data. The frame ends with a field called Frame Check Sequence (FCS)."}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Add Ethernet Frame \u2192 Short Name \u2192 Length(bytes)\u2192 Save."}),"\n",(0,r.jsx)(t.li,{children:"Create PDU or Select PDU \u2192  Select  PDU Type \u2192 Short Name \u2192Packing Byte Order (MOST SIGNIFICANT BIT FIRST, MOST SIGNIFICANT BYTE LAST and OPAQUE)\u2192 Start Position \u2192 Update Indication \u2192 Save."}),"\n"]}),"\n",(0,r.jsx)("div",{class:"text--center",children:(0,r.jsx)("figure",{children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.img,{alt:"Ethernet Frames",src:n(9243).A+"",title:"- Ethernet Frames",width:"1454",height:"626"}),"\r\n",(0,r.jsx)("figcaption",{children:"Fig. Ethernet Frames"})]})})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},9243:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/image57-9aa4861bc3a9eadfb114ac4a93de21db.webp"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);