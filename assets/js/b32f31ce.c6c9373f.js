"use strict";(self.webpackChunkeeacom_docs=self.webpackChunkeeacom_docs||[]).push([[9578],{4587:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var n=a(4848),i=a(8453);const r={title:"Creating and Defining Implementation Data Types in EEA COM",description:"Define Implementation Data Types in EEA COM. Choose from types like Value, Array, and Structure, referencing Base Types and applying Compute Methods for refined ECU data handling.",keywords:["Implementation Data Type","Base Type","Data Constraints","Compute Method","Array","Structure","Type Reference","EEA COM","Linear Equation","Raw Value","Denominator"],sidebar_position:5,sidebar_label:"Implementation Data Type"},s="7.5 Implementation Data Type",o={id:"data-types/implementation-data-types",title:"Creating and Defining Implementation Data Types in EEA COM",description:"Define Implementation Data Types in EEA COM. Choose from types like Value, Array, and Structure, referencing Base Types and applying Compute Methods for refined ECU data handling.",source:"@site/docs/data-types/implementation-data-types.md",sourceDirName:"data-types",slug:"/data-types/implementation-data-types",permalink:"/data-types/implementation-data-types",draft:!1,unlisted:!1,editUrl:"https://github.com/intrepidcs/eeacom-docs/blob/main/docs/data-types/implementation-data-types.md",tags:[],version:"current",lastUpdatedAt:1729859286e3,sidebarPosition:5,frontMatter:{title:"Creating and Defining Implementation Data Types in EEA COM",description:"Define Implementation Data Types in EEA COM. Choose from types like Value, Array, and Structure, referencing Base Types and applying Compute Methods for refined ECU data handling.",keywords:["Implementation Data Type","Base Type","Data Constraints","Compute Method","Array","Structure","Type Reference","EEA COM","Linear Equation","Raw Value","Denominator"],sidebar_position:5,sidebar_label:"Implementation Data Type"},sidebar:"tutorialSidebar",previous:{title:"Base Type",permalink:"/data-types/base-type"},next:{title:"Application Data Type (Basic)",permalink:"/data-types/application-data-type-basic"}},p={},l=[];function d(e){const t={h1:"h1",header:"header",img:"img",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"75-implementation-data-type",children:"7.5 Implementation Data Type"})}),"\n",(0,n.jsx)(t.p,{children:"Implementation Data Types is a very generic container and can define almost any data type.In its simplest form, an implementation data type is just a reference to a Base Type with optional data constraint and compute Method."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Add Implementation Data Type \u2192 Short Name \u2192 Type (Value,  Array,Structure and Type_Reference ) \u2192 We select Value."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Base Type   Select Base Type \u2192 All The details are shown \u2192 Save."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Compute Method  Create Compute Method or Select Compute Method \u2192 Short Name\u2192 Type (We select Linear)\u2192 Unit \u2192 Linear Equation \u2192 Raw Value \u2192 Denominator(*) \u2192 Save."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Data Constraint  Select Data Constraint or Select Data Constraint \u2192 All the  details of Selected Data Constraint is available (Displayed) \u2192 Save."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"If we select Array Type  Short Name -> Size Semantic -> Dimension Type\u2192        Array Size\u2192 Data Type \u2192 Referenced Data Type \u2192 Save."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"If we select STRUCTURE \u2192 Short Name \u2192 Type \u2192 Elements \u2192 Add Value Element \u2192 Add Array Element \u2192 Add Struct Element \u2192 Add Type Reference Element \u2192 Save."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)("div",{class:"text--center",children:(0,n.jsx)("figure",{children:(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.img,{alt:"Implementation Data Type",src:a(3714).A+"",title:"- Implementation Data Type",width:"1439",height:"489"}),"\r\n",(0,n.jsx)("figcaption",{children:"Fig. Implementation Data Type"})]})})})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},3714:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/image61-88bac675010698b25c7811daaa2d7fb4.webp"},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>o});var n=a(6540);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);