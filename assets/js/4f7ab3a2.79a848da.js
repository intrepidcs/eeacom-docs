"use strict";(self.webpackChunkeeacom_docs=self.webpackChunkeeacom_docs||[]).push([[3617],{3014:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>l,frontMatter:()=>p,metadata:()=>a,toc:()=>c});var t=o(4848),i=o(8453);const p={title:"Application Software Component Type in AUTOSAR",description:"Explore the Application Software Component Type in AUTOSAR, defining atomic components for specific applications. Configure provided and required ports, ensuring efficient communication and functionality in your ECU environment.",keywords:["AUTOSAR","Application Software Component","Atomic Component","ECU Configuration","Provided Ports","Required Ports","Methods","Events"],sidebar_position:2,sidebar_label:"Application SW Component Type"},s="9.2 Application SW Component Type",a={id:"software-components/application-sw-component-type",title:"Application Software Component Type in AUTOSAR",description:"Explore the Application Software Component Type in AUTOSAR, defining atomic components for specific applications. Configure provided and required ports, ensuring efficient communication and functionality in your ECU environment.",source:"@site/docs/software-components/application-sw-component-type.md",sourceDirName:"software-components",slug:"/software-components/application-sw-component-type",permalink:"/software-components/application-sw-component-type",draft:!1,unlisted:!1,editUrl:"https://github.com/intrepidcs/eeacom-docs/blob/main/docs/software-components/application-sw-component-type.md",tags:[],version:"current",lastUpdatedAt:1729859286e3,sidebarPosition:2,frontMatter:{title:"Application Software Component Type in AUTOSAR",description:"Explore the Application Software Component Type in AUTOSAR, defining atomic components for specific applications. Configure provided and required ports, ensuring efficient communication and functionality in your ECU environment.",keywords:["AUTOSAR","Application Software Component","Atomic Component","ECU Configuration","Provided Ports","Required Ports","Methods","Events"],sidebar_position:2,sidebar_label:"Application SW Component Type"},sidebar:"tutorialSidebar",previous:{title:"Data Transformation Set",permalink:"/software-components/data-transformation-set"},next:{title:"Composition SW Component Type",permalink:"/software-components/composition-sw-component-type"}},r={},c=[];function d(e){const n={h1:"h1",header:"header",img:"img",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"92-application-sw-component-type",children:"9.2 Application SW Component Type"})}),"\n",(0,t.jsx)(n.p,{children:"The application software component is an atomic software component that implements (a part of) an application. An atomic SW component cannot be decomposed into smaller units and can be assigned to only one ECU."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Add Application SW Component Type \u2192 Short Name\u2192 Add Number of Provided Ports \u2192 Select Type (Methods and Events) \u2192 Save."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Add Number of Required Ports \u2192 Select Type (Methods and Events) \u2192 Save."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Add Number of Provided And Required Ports\u2192 Select Type (Methods and Events) \u2192 Save it."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("div",{class:"text--center",children:(0,t.jsx)("figure",{children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Application SW Component Type",src:o(5190).A+"",title:"- Application SW Component Type",width:"1451",height:"622"}),"\r\n",(0,t.jsx)("figcaption",{children:"Fig. Application SW Component Type"})]})})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5190:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/image32-5bc309228e7e9ae598721af386b3ba86.webp"},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(6540);const i={},p=t.createContext(i);function s(e){const n=t.useContext(p);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(p.Provider,{value:n},e.children)}}}]);