{"searchDocs":[{"title":"2.5 J1939 Cluster","type":0,"sectionRef":"#","url":"/clusters/j1939-cluster/","content":"","keywords":"J1939 Cluster AUTOSAR ARXML CAN Bus ECU Connectors CAN FD Frame Triggering Address Arbitration Baudrate PNC Gateway CAN Frame Tx ECU Rx ECU","version":"Next"},{"title":"2.5.1 ECU Connectors​","type":1,"pageTitle":"2.5 J1939 Cluster","url":"/clusters/j1939-cluster/#j1939-cluster-ecu-connectors","content":" Add ECU → Connector → PNC Gateway Type → PNC Wakeup CAN Id → PNC Wakeup CAN Id Extended → PNC Wakeup CAN Id Mask → PNC Wakeup DLC →Save.ECU Controller Fill the CAN Configuration Requirements → CAN FD Configuration Requirements →CAN FD Configuration → Save.  ","version":"Next","tagName":"h2"},{"title":"2.5.2 Frame Triggerings​","type":1,"pageTitle":"2.5 J1939 Cluster","url":"/clusters/j1939-cluster/#j1939-cluster-frame-triggerings","content":" Add and Select CAN Frame→ Short Name→Identifier → CAN Addressing Mode → Tx ECU → Rx ECUs → CAN FD Frame Support → Save. ECU port → Select Tx and Rx ECUs. All CAN Frame details available in Frame detail section.  Fig. J1939 Cluster ","version":"Next","tagName":"h2"},{"title":"7.2 Application Data Type (Array)","type":0,"sectionRef":"#","url":"/data-types/application-data-type/","content":"7.2 Application Data Type (Array) The Application Data Type (Array) allows the creation, editing, and deletion of array types based on a specific application base type. This data type describes an array of objects. The number of objects in the array is determined by setting a value for the &quot;Max number of elements&quot; attribute. Whether the array can vary in size is defined by the &quot;Array size semantics&quot; attribute. The actual content of an Application Array Data Type is specified by the component known as the Application Array Element (ARAF). Create Array Data Type: To create array type for any primitive or defined type, click on Add button. Fill the required details and save the type by clicking on save button. Sample steps to create Array type is shown in below snap - Add Application Data Types(Array) → Short Name → Size semantic (Fixed Size, Variable Size(Old) and Variable Size (New)), Dimension (One Dimensional and Multidimensional) →Save Fig. Application Data Type(Array) Fig. Arxml File","keywords":"Application Data Type Array EEA COM AUTOSAR Array Size Semantics Multidimensional Array Primitive Type ECU Data Management","version":"Next"},{"title":"7.6 Application Data Type (Basic)","type":0,"sectionRef":"#","url":"/data-types/application-data-type-basic/","content":"7.6 Application Data Type (Basic) Add Application Data Type (Basic) → Short Name → Type (VALUE, BOOLEAN and STRING) → Save. Fig. Application Data Type (Basic)","keywords":"Application Data Type Basic Data Type VALUE BOOLEAN STRING EEA COM ECU Configuration Data Type Definition","version":"Next"},{"title":"2.1 CAN/CAN FD Cluster","type":0,"sectionRef":"#","url":"/clusters/can-cluster/","content":"","keywords":"CAN CAN FD CAN Cluster AUTOSAR ARXML ECU Connectors Frame Triggering Baud Rate CAN Frames PNC Gateway Type EEA COM automotive communication","version":"Next"},{"title":"2.1.1 ECU Connectors​","type":1,"pageTitle":"2.1 CAN/CAN FD Cluster","url":"/clusters/can-cluster/#ecu-connectors","content":" We can add ECUs and fill in the information related to them. There are two parts: the connector and the controller. Please select the PNC Gateway Type (Active, Passive, or None).  Fig. ECU Connectors  ","version":"Next","tagName":"h2"},{"title":"2.1.2 Frame Triggerings​","type":1,"pageTitle":"2.1 CAN/CAN FD Cluster","url":"/clusters/can-cluster/#frame-triggerings","content":" Add CAN frames and select CAN frames. For frame triggering details, assign the identifier in hexadecimal format (for example, 0x164). Choose the CAN frames that meet the specified requirements. In the ECU ports, select both Tx and Rx ECUs. Ensure that all information related to the frame is available in the Frame Details section.  Fig. Frame Triggering in CAN Cluster ","version":"Next","tagName":"h2"},{"title":"7.4 Base Type","type":0,"sectionRef":"#","url":"/data-types/base-type/","content":"7.4 Base Type Add Base Type→ Short Name → Category(VOID, FIXED_LENGTH) → Base Type Encoding→ Base Type Size(bits) → Byte Order (MOSTSIGNIFICANTBYTEFIRST, MOSTSIGNIFICANTBYTELAST, OPAQUE)→ Max Base Type Size(bits)→ Memory Alignment (0,8 and 32)→ Native Declaration (Signed Short , Unsigned Short , Signed Long, Unsigned Long, Signed Char , Unsigned Char, Float and double)→ Save. Fig. Base Type","keywords":"Base Type EEA COM Fixed Length Base Type Encoding Byte Order Memory Alignment AUTOSAR Native Declaration ECU Data Types Signed and Unsigned","version":"Next"},{"title":"2.2 Ethernet Cluster","type":0,"sectionRef":"#","url":"/clusters/ethernet-cluster/","content":"","keywords":"Ethernet Cluster AUTOSAR ARXML MAC Multicast Address VLANs Network Endpoint ECU Connectors Socket Connections SOME/IP Service multicast PDU ECU IP Address Baudrate IEEE 802.3","version":"Next"},{"title":"2.2.1 MAC Multicast Address​","type":1,"pageTitle":"2.2 Ethernet Cluster","url":"/clusters/ethernet-cluster/#mac-multicast-address","content":" An Ethernet multicast MAC address identifies receivers that belong to the same multicast group at the data link layer. Let’s assign a short name to the MAC multicast address.  Short Name: MulticastAddr1 MAC Multicast Address: 01:22:96:45:12:06 This multicast address is now saved as MulticastAddr1 with the value 01:22:96:45:12:06.  ","version":"Next","tagName":"h2"},{"title":"2.2.2 Coupling Port Connections​","type":1,"pageTitle":"2.2 Ethernet Cluster","url":"/clusters/ethernet-cluster/#coupling-port-connections","content":" Add and select the first and second coupling ports. All the parameter details are provided for both the first and second ports. Please note that the Connection Negotiation Behavior of the first and second ports cannot be the same.  ","version":"Next","tagName":"h2"},{"title":"2.2.3 VLANs​","type":1,"pageTitle":"2.2 Ethernet Cluster","url":"/clusters/ethernet-cluster/#vlans","content":" VLANs (Virtual LAN) can be created by assigning a VLAN ID (which is a valid hexadecimal value) and a VLAN name.  ","version":"Next","tagName":"h2"},{"title":"2.2.3.1 Network Endpoint​","type":1,"pageTitle":"2.2 Ethernet Cluster","url":"/clusters/ethernet-cluster/#network-endpoint","content":" An “endpoint” is a logical point that communicates back and forth with a network to which it is connected. In a network, it represents the endpoint for traffic associated with a specific protocol layer. An IP endpoint sends and receives packets to and from specific IP addresses.  Fig. Network EndPoint in Ethernet Cluster  Assign a short name to the address type (IPv4 or IPv6) → IP address (for example IPv4 → 192.0.2.146 or IPv6 → 2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF) → Save it. Network Endpoint required parameters are Short Name → Type(IPv4 and IPv6) → IPv4Address → IPv4addresssource (AUTOIP, AUTOIPDOIP, AUTOIPDHCPV4 , DHCPV4,FIXED) –&gt; Network Mask → TTL → IP address Keep Behavior(FORGET,STORPERSISTENTLY) → Default Gateway → Assignment Priority(0 to 7 in between) → Save.  ","version":"Next","tagName":"h3"},{"title":"2.2.3.2 ECU Connectors​","type":1,"pageTitle":"2.2 Ethernet Cluster","url":"/clusters/ethernet-cluster/#ecu-connectors","content":" Fig. ECU Connectors in Ethernet Cluster  We can add multiple ECUs. ECU → Connector → PNC Gateway Type(Active,None and Passive) → Maximum Transmission Unit → Path MTU Timeout→ Save it.  ","version":"Next","tagName":"h3"},{"title":"2.2.3.3 Socket Addresses​","type":1,"pageTitle":"2.2 Ethernet Cluster","url":"/clusters/ethernet-cluster/#socket-addresses","content":" Add Socket Address → Short Name → Port Type → Type(Unicast or Multicast) → Port Number → ECUs → Address Type → IP Address →Save. Select Unicast ECU or Select Multicast ECU→ Select Network Endpoint → save.  Fig. Socket Address in Ethernet Cluster  ","version":"Next","tagName":"h3"},{"title":"2.2.3.4 Socket Connections​","type":1,"pageTitle":"2.2 Ethernet Cluster","url":"/clusters/ethernet-cluster/#socket-connections","content":" Add Socket Connections → Select Server Port → Port Type (UDP, TCP, HTTP, IEEE1722, GENERIC) → Cast Type → Port Number → ECUs → Address Type→ IP Address → Save. PDUs → Select PDU → Header Id –&gt; PDU Collection Semantics (LASTISBEST or QUEUED) → PDU collection Trigger (ALWAYS or NEVER)→ Select ECU Tx Port → Select ECU Rx Port → All the PDU Details available in PDU Details section. Client Ports Add Client Port → Select Client Port → Short Name → Port Type → Port Number → ECU →Address Type → IP Address → Provided Services → Save PDUs → Select PDU → PDU Header Details→Header Id → PDU Collection Semantics → PDU Collection Trigger → ECU Port → Select Tx and Rx ECU Port → PDU Details are available → Save it.  2.2.3.4.1 Service Discovery​  Add → ECU Name → SD Type → IP Address → Port Address → Save Number of Service Discoveries.  Fig. Socket Connection in Ethernet Cluster  ","version":"Next","tagName":"h3"},{"title":"2.2.4 SOME/IP Service​","type":1,"pageTitle":"2.2 Ethernet Cluster","url":"/clusters/ethernet-cluster/#some-ip-service","content":" ECU→ Service Add Number of consumed Service Instances → Select Consumer → Save. Consumer Service Details Add Method→ Method Name → Method ID → Select Method Type → Select Request PDU→Select Response PDU → Select Provider Port → Select Required Port →Save.  Fig. Add Method  Method Details→ Min value → Max Value → Enter Value→ Simulation (Python vspyx someip simulation).(Note Please Connect Devices and Fill the required Details). Add Event→ Name→ Event ID → Event Handler → Select PDU → Select Provider Port → Select Required Port→ Save.  Fig. Add Event  Event Details→ Min value→ Max Value → Enter Value → Simulation (Python vspyx someip simulation).(Note Please Connect Devices and Fill the required Details). Event Group → Add→ Name → Event Group Identifier→ Instance Identifier → Priority → Events → Save . ","version":"Next","tagName":"h2"},{"title":"Data Types","type":0,"sectionRef":"#","url":"/data-types/","content":"Data Types The Data Type tab on EEA COM displays various data type information. We can create and edit data types from this section. Fig. Data Types To view and edit the information for each data type, click on the specific data type, and the detailed information tab will open in the window to the right.","keywords":"Data Types EEA COM AUTOSAR Data Type Management Create Data Types Edit Data Types ECU Communication","version":"Next"},{"title":"Clusters","type":0,"sectionRef":"#","url":"/clusters/","content":"Clusters The &quot;Cluster&quot; tab on EEA COM displays various cluster information. The Clusters tab shows information for the following clusters. CAN ClusterEthernet ClusterLINFlexRayJ1939 Fig. Cluster Types To view information for each cluster, click on the specific cluster, and detailed information will open in the window on the right.","keywords":"EEA COM Expert clusters CAN cluster Ethernet cluster LIN cluster FlexRay cluster J1939 cluster ECU connectors network management AUTOSAR automotive communication","version":"Next"},{"title":"7.5 Implementation Data Type","type":0,"sectionRef":"#","url":"/data-types/implementation-data-types/","content":"7.5 Implementation Data Type Implementation Data Types is a very generic container and can define almost any data type.In its simplest form, an implementation data type is just a reference to a Base Type with optional data constraint and compute Method. Add Implementation Data Type → Short Name → Type (Value, Array,Structure and Type_Reference ) → We select Value. Base Type Select Base Type → All The details are shown → Save. Compute Method Create Compute Method or Select Compute Method → Short Name→ Type (We select Linear)→ Unit → Linear Equation → Raw Value → Denominator(*) → Save. Data Constraint Select Data Constraint or Select Data Constraint → All the details of Selected Data Constraint is available (Displayed) → Save. If we select Array Type Short Name -&gt; Size Semantic -&gt; Dimension Type→ Array Size→ Data Type → Referenced Data Type → Save. If we select STRUCTURE → Short Name → Type → Elements → Add Value Element → Add Array Element → Add Struct Element → Add Type Reference Element → Save. Fig. Implementation Data Type","keywords":"Implementation Data Type Base Type Data Constraints Compute Method Array Structure Type Reference EEA COM Linear Equation Raw Value Denominator","version":"Next"},{"title":"7.1 Data Constraints","type":0,"sectionRef":"#","url":"/data-types/data-constraints/","content":"7.1 Data Constraints A Data Constraint is used to decorate other data types with one or more constraints. Use the dataConstraintRef property of the Application DataType or Implementation DataType classes to access the reference string. Add Data Constraints → Short Name → In Physical Constraint → Lower and Upper Limit → Lower and Upper Limit Interval→ Validity(NOTAVAILABLE, NOT DEFINED, NOT VALID, VALID)→ Save Physical Constraints. Add Internal Constraints → Short Name → Lower and Upper Limit→ Lower and Upper Limit Interval → Validity(NOTAVAILABLE, NOT DEFINED, NOT VALID, VALID) → Save Internal Constraints. Fig. Data Constraints","keywords":"Data Constraints EEA COM AUTOSAR Physical Constraints Internal Constraints Data Type Limits ECU Data Management","version":"Next"},{"title":"7.3 Compute Method","type":0,"sectionRef":"#","url":"/data-types/compute-method/","content":"7.3 Compute Method Compute method or computation method in short is used to transform the fixed point values in software into physical values which can be floating point values. There are mainly three categories of compute methods: (Identical,Linear,state encoded,Scale linear,Scale linear and state encoded Bit field state encode and Rat function) Linear: This type of Compu method is used when the value to be converted is of linear type. During configuration, we have to give ranges of raw values. Like minimum this value can be, maximum this value can go,Factor (which is the multiplication factor or its also called gain),Offset value. Text Table: It is the most simple type of compute method. It is a table of numerical values which represent some text which has some meaning. Scale-Linear: It is a table of linear compute methods. Add Compute Method→ Short Name→ Type (Identical, Linear, State Encoded, Scale Linear, Scale Linear and State Encoded, Bit Field State Encode and Rat Function) → Unit →Save. Fig. Compute Methods","keywords":"Compute Method Linear Transformation State Encoded Scale Linear Bit Field State Encode AUTOSAR EEA COM ECU Data Conversion Raw to Physical Values","version":"Next"},{"title":"ECU","type":0,"sectionRef":"#","url":"/ecu/","content":"ECU Add ECU → Short Name → Diagnostic Address (Hexadecimal value) → Sleep Mode Supported(boolean)(True or false) → Wake UP Over Bus Supported(Boolean) (True or False) → Save.Cluster Details → CAN Frame Details → LIN Frame Details → FlexRay Frame Details → PDU Details →Signals Details → all the parameters details are available because we selected ECU in multiple sections. Fig. ECUs","keywords":"ECU AUTOSAR ARXML Diagnostic Address Sleep Mode Wake Up Over Bus CAN Frame LIN Frame FlexRay Frame PDU Details Signal Details ECU Configuration","version":"Next"},{"title":"7.6 Application Data Type (Structure)","type":0,"sectionRef":"#","url":"/data-types/application-data-type-structure/","content":"7.6 Application Data Type (Structure) Add Application Data Type (Structure) → Short Name →Add and Select Data Types( VALUE, BOOLEAN, STRING, ARRAY and STRUCTURE) → Add multiple Elements → Save. Fig. Application Data Type (Structure)","keywords":"Application Data Type Structure VALUE BOOLEAN STRING ARRAY EEA COM ECU Configuration Data Type Definition","version":"Next"},{"title":"2.4 FlexRay Cluster","type":0,"sectionRef":"#","url":"/clusters/flexray-cluster/","content":"","keywords":"FlexRay Cluster AUTOSAR ARXML FlexRay Channels Frame Triggering ECU Connector Message ID Communication Cycle Tx ECU Rx ECU Baudrate Protocol Version","version":"Next"},{"title":"2.4.1 Channels​","type":1,"pageTitle":"2.4 FlexRay Cluster","url":"/clusters/flexray-cluster/#channels","content":" Add channel1 and channel2→ Channel Name (Channel A and B) → Save. Add Frame Triggering → Select FlexRay Frame → Message ID → Tx ECU → Rx ECU → Save. Frame Triggering Details → Message ID → Allow Dynamic L SDU Length (True or false) → Payload Preamble Indicator (True or False) → Add Scheduling Timing → Communication Cycle Type (Counter or Repetition) → Slot ID → Cycle Counter→Base Cycle → Cycle Repetition → Save. ECU PORT → Add Tx ECU → Rx ECU → Save All the information of the frame is available in the Frame Details Section. Add ECU Connector → Select ECU → Channel →Connector and Controller Fill the details → Save it.  Fig. FlexRay Cluster ","version":"Next","tagName":"h2"},{"title":"Frames","type":0,"sectionRef":"#","url":"/frames/","content":"Frames In Frame Tab we can add, delete and save frames. Frame types : CAN FrameLIN Sporadic FramesLIN Unconditional FramesLIN Event Triggered FramesFlexRay FramesEthernet Frames","keywords":"Frames AUTOSAR ARXML CAN Frames LIN Frames FlexRay Frames Ethernet Frames Frame Types LIN Sporadic Frames LIN Unconditional Frames Frame Management","version":"Next"},{"title":"4.1 CAN Frames","type":0,"sectionRef":"#","url":"/frames/can-frames/","content":"4.1 CAN Frames Add CAN Frame → Short Name → Length(Bytes) → Save.Create PDU →Select PDU Type → Short Name → Packing Byte Order → Start Position → Update Indication Bit Position → Save.Create or Select Signal → Short Name →Type → Transfer Property → Packing Byte Order → Start Position → Update Indication Bit Position→ Length(bits) → Select Any one (Base Type /Compute Method/Data Constraint/Implementation Data Type/Data transformation ) → Save. Fig. CAN Frame","keywords":"CAN Frames AUTOSAR ARXML PDU Signal Management Short Name Length Packing Byte Order Transfer Property Update Indication Bit Position Base Type Compute Method","version":"Next"},{"title":"4.2 LIN Sporadic Frames","type":0,"sectionRef":"#","url":"/frames/lin-sporadic-frames/","content":"4.2 LIN Sporadic Frames Sporadic frames attempt to provide some dynamic behavior to LIN. Sporadic frames always carry signals (data), and their IDs. Only the slave task associated with the master node can send sporadic frames. In the figure below, you can add frames, giving each frame a short name and assigning a Length (in bytes) value. Options to add or remove frames are available. After selecting the frame, ensure to save your changes. Fig. LIN Sporadic Frame","keywords":"LIN Sporadic Frames AUTOSAR ARXML Dynamic Behavior Signal Management Short Name Frame Length Slave Task Master Node Frame ID","version":"Next"},{"title":"4.6 Ethernet Frames","type":0,"sectionRef":"#","url":"/frames/ethernet-frames/","content":"4.6 Ethernet Frames An Ethernet frame starts with a header, which contains the source and destination MAC addresses, among other data. The middle part of the frame is the actual data. The frame ends with a field called Frame Check Sequence (FCS). Add Ethernet Frame → Short Name → Length(bytes)→ Save.Create PDU or Select PDU → Select PDU Type → Short Name →Packing Byte Order (MOST SIGNIFICANT BIT FIRST, MOST SIGNIFICANT BYTE LAST and OPAQUE)→ Start Position → Update Indication → Save. Fig. Ethernet Frames","keywords":"Ethernet Frames AUTOSAR ARXML MAC Addresses Frame Check Sequence PDU Packing Byte Order Short Name Frame Length","version":"Next"},{"title":"4.5 FlexRay Frames","type":0,"sectionRef":"#","url":"/frames/flexray-frames/","content":"4.5 FlexRay Frames FlexRay is a communication bus designed to ensure high data rates, fault tolerance, operating on a time cycle, split into static and dynamic segments for event-triggered and time-triggered communications. Add FlexRay Frame→ Short Name → Length(bytes)→ SaveCreate PDU or Select PDU → Select PDU Type –&gt; Short Name –&gt; Packing Byte Order (MOST SIGNIFICANT BIT FIRST, MOST SIGNIFICANT BYTE LAST and OPAQUE)--&gt; Start Position –&gt; Update Indication –&gt; Save. Fig. FlexRay Frame","keywords":"FlexRay Frames AUTOSAR ARXML Communication Bus High Data Rates Fault Tolerance PDU Packing Byte Order Short Name Frame Length","version":"Next"},{"title":"Gateway","type":0,"sectionRef":"#","url":"/gateway/","content":"Gateway A gateway is a function within an EcuInstance that performs as a FrameMapping, IPduMapping or ISignalMapping function between two or more CommunicationClusters. Add Number of Gateways → Short Name → Select ECU→ Save Number of Gateways. Add → Select PDU Mapping→ PDU Max Length → PDUR TP Chunk Size →Select Source Cluster → Select Source Channel →Select Source PDU→ Select Target Cluster→ Select Target Channel → Select Target PDU → Save Number of Contained | PDUs. Fig. Gateway","keywords":"AUTOSAR Gateway Configuration Frame Mapping IPDU Mapping ISignal Mapping Communication Clusters","version":"Next"},{"title":"4.4 LIN Event Triggered Frames","type":0,"sectionRef":"#","url":"/frames/lin-event-triggered-frames/","content":"4.4 LIN Event Triggered Frames The purpose of this method is to receive as much information from the slave nodes without overloading the bus with frames. An event triggered frame can be filled with the data from more than one slave node. A slave only updates the data in an event-triggered frame when the value has changed. If more than one slave wants to update data in the frame a collision occurs. The master should then send the frames to each of the slaves starting with the one with the highest priority. In the below figure add the frames and assign a short name to the frame. Add and select the LIN Unconditional frame and save frame. Add LIN Event Triggered Frames→ Short Name → Length(Bytes) → Save.Add Frame → Select Frame → LIN Unconditional Frame → Save.(Remove Frame option is also available) Fig. LIN Event Triggered Frame","keywords":"LIN Event Triggered Frames AUTOSAR ARXML Slave Nodes Data Update Frame Collision Master Node LIN Unconditional Frame Short Name Frame Length","version":"Next"},{"title":"5.2 DCM I PDUs","type":0,"sectionRef":"#","url":"/pdus/dcm-pdus/","content":"5.2 DCM I PDUs DCM I PDUs always dynamic length Add DCM I PDU → Short Name → Length(Bytes) → Diag Type(DIAGREQUEST and DIAGRESPONSE) → Save. Fig. DCM I PDUs","keywords":"DCM PDU AUTOSAR ARXML Short Name Length Diagnostic Type DIAGREQUEST DIAGRESPONSE","version":"Next"},{"title":"5.3 Container I PDUs","type":0,"sectionRef":"#","url":"/pdus/container-pdus/","content":"5.3 Container I PDUs Add Container I PDU → Short Name → Length → Meta Data Length → Container Timeout → Container Trigger → Header Type → Rx Accept Contained I PDU → Threshold Size → Save. Add → Select PDU→ Select Cluster →Select RxECUs → Select TxECUs →Select PDUs → Cluster Name → Channel Name → PDU Name → Long Header → Short Header → Timeout → Trigger(ALWAYS and NEVER)→Collection Semantics (LAST BEST and QUEUED) → Save. Fig. Container I PDUs","keywords":"Container PDU AUTOSAR ARXML Short Name Length Meta Data Length Container Timeout Container Trigger Header Type Rx ECU Tx ECU Collection Semantics","version":"Next"},{"title":"4.3 LIN Unconditional Frames","type":0,"sectionRef":"#","url":"/frames/lin-unconditional-frames/","content":"4.3 LIN Unconditional Frames This frame is the normal type of LIN message format for data communication. Basically, the master node will send this frame header in a scheduled frame slot and the designated slave node will receive and fill the data and send it back. This frame normally carries off the signals and the defined identifiers from 0-59 (0x00 to 0x3B). In the LIN Unconditional frames, assign a short name and a value to the length (in bytes). The options for creating a PDU and selecting a PDU are available. When selecting the PDU option, choose the PDU Type and frame. Additionally, select the Packing Byte Order options, provide a value for the start position, and update the indication bit position. Add LIN Unconditional Frames→ Short Name → Length (bytes) → SaveCreate PDU or Select PDU → Select PDU → Type → All the details of PDU are displayed → Short Name → Packing Byte order → Start Position → Update Indication → Save. Fig. LIN Unconditional Frame","keywords":"LIN Unconditional Frames AUTOSAR ARXML Data Communication Master Node Slave Node Frame Identifier PDU Packing Byte Order Short Name Frame Length","version":"Next"},{"title":"2.3 LIN Cluster","type":0,"sectionRef":"#","url":"/clusters/lin-cluster/","content":"","keywords":"LIN Cluster AUTOSAR ARXML LIN Nodes LIN Master LIN Slave LIN Bus LIN Frame Triggering ECU Connector Schedule Tables Baudrate PNC Gateway LDF LIN Checksum","version":"Next"},{"title":"2.3.1 ECU Connector​","type":1,"pageTitle":"2.3 LIN Cluster","url":"/clusters/lin-cluster/#ecu-connector","content":" Add ECU → Connector Type (Master or slave) → Connector → PNC Gateway Type(Active,None and Passive)→ Initial Nad → Save. Connector and controller two parts are there. Controller part Controller Type → Wakeup By Controller Supported (True or false) → Protocol version –&gt; Configured Nad –&gt; Function Id → Supplier Id → variant Id → Save.  Fig. ECU Connector in LIN Cluster  ","version":"Next","tagName":"h2"},{"title":"2.3.2 Frame Triggering​","type":1,"pageTitle":"2.3 LIN Cluster","url":"/clusters/lin-cluster/#frame-triggering","content":" Add Frame or select Frames (LIN Sporadic Frames, LIN Unconditional Frames and LIN Event Triggered Frames) → Short Name → Frame Type → Identifier → LIN Checksum(Classic and Enhanced) → Tx ECU → Rx ECU →Save. Frame Triggering Details → ECU Port(Here we select Tx and Rx ECUs) → Frame Details available.  Fig. Frame Triggering in LIN Cluster  ","version":"Next","tagName":"h2"},{"title":"2.3.3 Schedule Tables​","type":1,"pageTitle":"2.3 LIN Cluster","url":"/clusters/lin-cluster/#schedule-tables","content":" Add schedule table → Short Name → Resume Position→ Run mode→ Save. Add Entry→ Select LIN Frame Triggering→ Enter Type→ Position in Table→ Delay → Save.  Fig. Schedule Table in LIN Cluster ","version":"Next","tagName":"h2"},{"title":"Methods and Events","type":0,"sectionRef":"#","url":"/methods-and-events/","content":"","keywords":"Methods Events EEA COM AUTOSAR ECU Configuration Data Types Operations Runnable Application Data Type Implementation Data Type","version":"Next"},{"title":"8.1 Methods​","type":1,"pageTitle":"Methods and Events","url":"/methods-and-events/#methods","content":" Add Method→Short Name → Add Operation →Short Name to operations → Save it.Add Arguments → Select Data Type (In between Implementation data Type , Application Data Type Basic, Application Data Type Array, Application Data Type Structure)→ Short Name → Direction (IN ,INOUT,OUT) → Save.  ","version":"Next","tagName":"h2"},{"title":"8.2 Events​","type":1,"pageTitle":"Methods and Events","url":"/methods-and-events/#events","content":" An event is a trigger to an action, which in Autosar, is usually a runnable that defines (part of) the internal behavior of a component.  Add Events → Short Name → Add Variable → Select Data Type (Select Data Type (In between Implementation data Type , Application Data Type Basic, Application Data Type Array, Application Data Type Structure) → Save . ","version":"Next","tagName":"h2"},{"title":"PDUs (Protocol Data Units)","type":0,"sectionRef":"#","url":"/pdus/","content":"PDUs (Protocol Data Units) PDU contains information other than our data which is used or extracted by below or upper layers in transmission or reception respectively. The PDU is basically a group of packed signals along with lower layer information. AUTOSAR COM performs the packing or unpacking of signals in or from PDU while transmission or reception respectively. Every PDU has a unique identifier associated with it. The PDUs tab on EEA COM software shows multiple types of PDUs. Fig. PDUs Types Here is one more thing: we can copy the PDU signals and paste. Also paste signals multiple times we can paste here and also create the duplicate signals. Fig. PDUs copy paste option","keywords":"PDU Protocol Data Units AUTOSAR ARXML Signal Packing Transmission Reception Unique Identifier EEA COM Copy and Paste Signals Duplicate Signals","version":"Next"},{"title":"5.4 General Purpose PDUs","type":0,"sectionRef":"#","url":"/pdus/general-purpose-pdus/","content":"5.4 General Purpose PDUs This element is used for AUTOSAR Pdus without additional attributes that are routed by a bus interface. Add General Purpose PDU → Length(Bytes) → Save. Fig. General Purpose PDU","keywords":"General Purpose PDU AUTOSAR ARXML Length Data Management Protocol Data Unit","version":"Next"},{"title":"5.6 Multiplexed I PDUs","type":0,"sectionRef":"#","url":"/pdus/multiplexed-pdus/","content":"5.6 Multiplexed I PDUs A Multiplexed I PDU contains a DynamicPart, an optional StaticPart and a selectorField. In case of multiplexing this I PDU is routed between the PDU Multiplexer and the Interface Layer. A multiplexer is used to define variable parts within an I PDU that may carry different signals. The receivers of such a I PDU can determine which signal PDUs are transmitted by evaluating the selector field, which carries a unique selector code for each sub-part. Fig. Multiplexed I PDUs Add Multiplexed I PDU → Short Name → Length(bytes)→ Selector Field Byte Order( MOST SIGNIFICANT BIT FIRST, MOST SIGNIFICANT BYTE LAST and OPAQUE) → Selector Field Length(bits) → Selector Field start Position →Trigger Mode (DYNAMIC PART TRIGGER,STATIC OR DYNAMICPORT TRIGGER, STATIC PORT TRIGGER and NONE) → Dynamic part and Static Part.Dynamic Part Number of Segment Byte Order( MOST SIGNIFICANT BIT FIRST, MOST SIGNIFICANT BYTE LAST and OPAQUE) → Segment Length(bits) → Segment Position → Save. Add Number of Alternative → Select I Signal I PDU →Initial Dynamic part → Selector Field Code -&gt; PDU → Save. Static Part Number of Segment Byte Order( MOST SIGNIFICANT BIT FIRST, MOST SIGNIFICANT BYTE LAST and OPAQUE)→ Segment Length(bits) →Segment Position → Select PDU→ Select I Signal I PDU → Save.","keywords":"Multiplexed PDU AUTOSAR ARXML Short Name Length Selector Field Trigger Mode Dynamic Part Static Part Segment Length Signal Management","version":"Next"},{"title":"5.5 J1939 DCM I PDUs","type":0,"sectionRef":"#","url":"/pdus/j1939-dcm-pdus/","content":"5.5 J1939 DCM I PDUs Add J1939 DCM I PDUs → Length(Bytes) → Diagnostic Message Type → Save. Fig. J1939 DCM I PDUs","keywords":"J1939 DCM PDU AUTOSAR ARXML Length Diagnostic Message Type Diagnostic Communication Manager","version":"Next"},{"title":"5.8 N PDUs","type":0,"sectionRef":"#","url":"/pdus/n-pdus/","content":"5.8 N PDUs Whenever the PDU is in layers below PDUR and above Communication Drivers layer then its called N-PDU. Add N PDU → Short Name→ Length→ Save. Fig. N PDUs","keywords":"N PDU AUTOSAR ARXML Short Name Length Communication Layers PDUR Communication Drivers","version":"Next"},{"title":"5.12 Secure Communication Props Set","type":0,"sectionRef":"#","url":"/pdus/secure-communication-props-set/","content":"5.12 Secure Communication Props Set Add Secure Communication Props Set → Short Name →Save. Add Authentication Props→ Short Name → Category → Auth Algorithm → Auth Info Tx Length → Save. Add Freshness Props → Short Name → Category → Counter Sync Attempts → Time Stamp Time Periodic Factor → Value Length → Value Tx Length → Use Time Stamp (True and False) → Save Fig. Secure Communication Props Set PDUs","keywords":"Secure Communication Props AUTOSAR ARXML Authentication Props Freshness Props Secure PDU Cryptography Data Security","version":"Next"},{"title":"5.1 Signal I PDUs","type":0,"sectionRef":"#","url":"/pdus/signal-pdus/","content":"5.1 Signal I PDUs The Signal I PDUs assembled and disassembled in AUTOSAR COM consists of one or more signals. In case no multiplexing is performed this I PDU is routed to/from the Interface Layer. A maximum of one dynamic length signal per IPdu is allowed. Steps to create I Signals I PDU is shown in below snap - Fig. Signal I PDUs Add I Signal I PDUs → Short Name → Length(Bytes) → Minimum Delay (seconds) –&gt; Save.Create Signal or Select Signal → Short Name → Length(bits) → Description→ Unit →Save.Base Type,Compute Method, Data Constraint, Implementation Data Type and Data Transformation Select one and fill the data accordingly.","keywords":"Signal PDU AUTOSAR ARXML Short Name Length Minimum Delay Base Type Compute Method Data Constraint Implementation Data Type Data Transformation","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/intro/","content":"","keywords":"eeacom eeacom-docs EEA COM Expert AUTOSAR ARXML files ECU network databases communication networks CAN LIN FlexRay Automotive Ethernet software tool database migration network architecture application areas import export FIBEX DBC VSDB Ethernet clusters SOME/IP","version":"Next"},{"title":"1.1 Features​","type":1,"pageTitle":"Introduction","url":"/intro/#features","content":" ARXML output files can be part of further AUTOSAR workflow or to load in other AUTOSAR tools. Edit to add new PDUs, frames, signals, data type and assign.Create an entirely new AUTOSAR communication matrix by defining clusters, ECUs data types, and more.Support for Ethernet and FlexRay communication architectures.View or edit the Ethernet switch configuration from the ARXML file.Edit and change LIN schedule table design.Legacy and other database (.dbc, .vsdb, .csv*, .ldf*, .fibex*) import available.ECU or System Extract can be loaded.Edit compute methods and data types to test with real ECUs.Support for creating Ethernet clusters for vehicle communication networks.Support for SOME/IP – view Consumed and Provided Services. Edit Methods, Event, Event Groups, Others.Easy View of Network Endpoints and Application End points. Easily change IP and Port configs for testing.Easy view of Socket Connections – SoAd, DoIP entities. See details on Gateway ECUs.EEA COM creates/loads an existing ARXML file for easy viewing/editing of AUTOSAR Clusters information, ECUs, PDUs, Frames, Methods and Events And signal information with full details in hierarchical form.  ","version":"Next","tagName":"h2"},{"title":"1.2 EEA Com UI​","type":1,"pageTitle":"Introduction","url":"/intro/#eea-com-ui","content":" The window shown in the fig 1 will pop up after clicking on eeacom application icon. This window provides options to work on different versions of autosar.  Fig 1. eeacom startup window  ","version":"Next","tagName":"h2"},{"title":"1.3 Application areas​","type":1,"pageTitle":"Introduction","url":"/intro/#application-areas","content":" After selecting the desired AUTOSAR version, an application will pop up with all the options available for working with that specific version of AUTOSAR.  Fig 2. eeacom application  ","version":"Next","tagName":"h2"},{"title":"1.4 File Menu​","type":1,"pageTitle":"Introduction","url":"/intro/#file-menu","content":" All the menu options required to create or edit an ARXML file will appear after clicking on 'File,' as shown in Figure 3  Fig 3. File menu  Explanations for each option in the file menu:  Create New - Create a new ARXML file from scratch.Open to Edit - Load an existing ARXML file for editing.Open to View - Load an existing ARXML file for viewing only; editing is not allowed.Save - Save all changes made to the ARXML file.Close File - Remove the currently loaded or created ARXML file, providing a clean start for the user.Exit - Exit the application.  ","version":"Next","tagName":"h2"},{"title":"1.5 Tool Menu​","type":1,"pageTitle":"Introduction","url":"/intro/#tool-menu","content":" All the export, import, and settings options will appear after clicking on the Tools menu.  Fig 4. Tool Menu  The explanation of all the options under the Tool menu is as follows.  Import VSDB - Imports a VSDB file and converts it into an ARXML file.Import FIBEX - Imports a FIBEX file and converts it into an ARXML file.Import LDF - Imports an LDF file and converts it into an ARXML file.Import DBC - Imports a DBC file and converts it into an ARXML file.Export DBC - Allows exporting a DBC file after loading the ARXML file in the application using the ‘Open to Edit’ option.Export VSDB - Allows exporting a VSDB file after loading the ARXML file in the application using the ‘Open to Edit’ option.Import Custom - Imports Excel data for SOMEIP and converts it into an ARXML file.ARXML Comparison - Compares two ARXML files based on their CAN clusters and provides the output in an Excel sheet format.  ","version":"Next","tagName":"h2"},{"title":"1.6 Panels​","type":1,"pageTitle":"Introduction","url":"/intro/#panels","content":" Refer to Figure 5 for an overview of all the areas of EEA COM.  Fig 5. Panels  Left Panel (1): Represents all the entities that can be created, edited, and viewed. It includes a button that opens the middle panel and displays the data in the most effective way.Upper Middle Panel (2): Displays the details of the entities that the user clicks on in the left panel. These panels can be removed as needed and are detachable.Bottom Middle Panel (3): Displays all activities occurring during the use of this application.Top Right Panel (4): Displays a tree view of the ARXML file.Middle Right Panel (5): Displays the attributes and their values for the selected entities in the tree panel.Bottom Right Panel (6): Displays information or definitions of the attributes for the entity selected in the tree panel.  ","version":"Next","tagName":"h2"},{"title":"1.7 Modification Buttons​","type":1,"pageTitle":"Introduction","url":"/intro/#modification-buttons","content":" The buttons shown in Figure 6 are displayed on the panels of all entities. These buttons are necessary while creating or editing an ARXML file. The 'Save' button saves all changes made to the selected entity in the panel. The 'Add' button adds a new entity, the 'Delete' button removes an entity, and the 'Cancel' button undoes any changes made to the entity.  Fig 6. Modification buttons ","version":"Next","tagName":"h2"},{"title":"5.9 Secured I PDUs","type":0,"sectionRef":"#","url":"/pdus/secured-pdus/","content":"5.9 Secured I PDUs Add Secured I PDU→ Short Name → Length → Meta DataLength → Has Dynamic Length(True and False)→ Use As Cryptographic I PDU(True and False) → Use Secured PDU Header→ Save. Secure Communication Props Payload Add Payload→ Select Payload → Select Cluster → Select Channel → Select PDU→ Save. Authentication Props Add → Select Secure Authentication Props→ Category → Auth Algorithm → Auth Info Tx Length → Save. Freshness Props Add→ Select Secure Freshness Props→ Category → Freshness Counter Sync Attempts→ Freshness Time Stamp Time Period Factor→ Freshness Value Length → Freshness Value Tx Length → Use Freshness Timestamp → Save. Fig. Secured I PDUs Payload in Secured I PDUs Fig. Freshness Props In Secured I PDUs","keywords":"Secured PDU AUTOSAR ARXML Short Name Length Meta Data Length Cryptographic PDU Secure Communication Authentication Freshness Properties","version":"Next"},{"title":"5.7 NM PDUs","type":0,"sectionRef":"#","url":"/pdus/nm-pdus/","content":"5.7 NM PDUs Add NM PDU→ Short Name → Length→ NM Data Information → NM Vote Information → Save. Create Signal Or Select Signal→ Select I Signals → Short Name → Type→ Packing Byte Order → Start Position → Transfer Property → Update Indication →Save. Fig. NM PDUs","keywords":"NM PDU AUTOSAR ARXML Short Name Length NM Data Information NM Vote Information Signal Management Packing Byte Order","version":"Next"},{"title":"5.11 XCP PDUs","type":0,"sectionRef":"#","url":"/pdus/xcp-pdus/","content":"5.11 XCP PDUs Add XCP PDU→ Short Name→ Length(Bytes) → Save. Fig. XCP PDUs","keywords":"XCP PDU AUTOSAR ARXML Short Name Length XCP Protocol Measurement Calibration","version":"Next"},{"title":"Software Components","type":0,"sectionRef":"#","url":"/software-components/","content":"Software Components AUTOSAR software components are reusable building blocks of AUTOSAR software. An AUTOSAR software component encapsulates one or more algorithms and communicates with its environment through well-defined ports.","keywords":"AUTOSAR Software Components Reusable Building Blocks ECU Configuration Ports Algorithms Component Communication AUTOSAR Architecture","version":"Next"},{"title":"6.2 I Signals Group","type":0,"sectionRef":"#","url":"/signal/signals-group/","content":"6.2 I Signals Group A Signal Group is a set of signals to be transmitted at the same instance and the signals packed in a Signal Group are known as Group Signals. In the I signal group we create or select the more I signals. And we added multiple I Signal Groups also. Fig. I Signals Group","keywords":"Signal Group EEA COM AUTOSAR Group Signals Signals Signal Management","version":"Next"},{"title":"9.3 Composition SW Component Type","type":0,"sectionRef":"#","url":"/software-components/composition-sw-component-type/","content":"9.3 Composition SW Component Type Composition Software Component Type aggregates Software Component Prototypes. They do not implement any functionality. They just aggregate the individual software components which are responsible for implementing the functionality. Add Composition SW Component Type → Short Name→ Add Number of Components → Select Application SW Component Type → Save. Add Number of Assembly Connectors → Select Provided Components → Select Required Component → Select Provided Port → Select Required Port → Save. Fig. Composition SW Component Type","keywords":"AUTOSAR Composition Software Component Software Component Prototypes ECU Architecture Provided Components Required Components Assembly Connectors","version":"Next"},{"title":"6.1 I Signals","type":0,"sectionRef":"#","url":"/signal/signals/","content":"6.1 I Signals In I Signals add the signals, save and delete options are available. I Signals we can assign short name, length in bits, units and Long name. Steps to create I Signals are shown in below snap - Fig. I Signals In signals, we select or create the data types. Base TypeCompute MethodData constraintImplementation Data TypeData Transformation","keywords":"Signal creation EEA COM AUTOSAR I Signals Signal management Base Type Compute Method Data Constraint","version":"Next"},{"title":"9.2 Application SW Component Type","type":0,"sectionRef":"#","url":"/software-components/application-sw-component-type/","content":"9.2 Application SW Component Type The application software component is an atomic software component that implements (a part of) an application. An atomic SW component cannot be decomposed into smaller units and can be assigned to only one ECU. Add Application SW Component Type → Short Name→ Add Number of Provided Ports → Select Type (Methods and Events) → Save. Add Number of Required Ports → Select Type (Methods and Events) → Save. Add Number of Provided And Required Ports→ Select Type (Methods and Events) → Save it. Fig. Application SW Component Type","keywords":"AUTOSAR Application Software Component Atomic Component ECU Configuration Provided Ports Required Ports Methods Events","version":"Next"},{"title":"Signals","type":0,"sectionRef":"#","url":"/signal/","content":"Signals The Signals tab on EEA COM software shows two things as follows. I SignalsI Signal Groups","keywords":"Signals Signal Groups EEA COM AUTOSAR Signal Configuration Signal Management","version":"Next"},{"title":"9.1 Data Transformation Set","type":0,"sectionRef":"#","url":"/software-components/data-transformation-set/","content":"9.1 Data Transformation Set Add Data Transformation Set → Short Name→ Save. Add Transformation Technologies → Short Name →Save. Select Technology Type ( SOMEIP and ENDTOEND) → Technology Type (SOMEIP)→ Version → Has Internal State (True or False) →Need Original Data (True or False)→ Transformer Class (CUSTOM, SAFETY , SECURITY and SERIALIZER) →Header Length → In Place (True or False)→ Alignments→ Byte Order → Interface Version . Technology Type (ENDTOEND) → Version → Has Internal State (True or False) → Need Original Data (True or False) → Transformer Class (CUSTOM, SAFETY , SECURITY and SERIALIZER) → Header Length→ In Place (True or False) → Counter Offset→ CRC Offset → Data ID Mode (ALL16BIT, ALTERNATING8BIT, LOWER12BIT and LOWER8BIT)→Data Id Nibble Offset → Max Delta Counter → Max Error State Init →Max Error State Invalid →Max Error State valid → Max No New Or Repeated Data -&gt; Min Ok State Init→ Min Ok State Invalid → Min Ok State Valid → Offset → Profile Behavior (PRER42 and R42)→Profile Name → Sync Counter Init → Upper Header Bits To shift→ Window Size → Save Transformation Technologies. Add Data Transformation → Short Name →Add Transformation Technologies →Save. Fig. Data Transformation Set","keywords":"AUTOSAR Data Transformation Set Transformation Technologies SOMEIP ENDTOEND Data ID Mode ECU Configuration Data Management Communication Protocols","version":"Next"},{"title":"9.4 System","type":0,"sectionRef":"#","url":"/software-components/system/","content":"9.4 System Add System → Short Name → Category(SYSTEM_CONSTRAINTS, SYSTEM_DESCRIPTION,SYSTEM_EXTRACT,ECU_EXTRACT, ABSTRACT_SYSTEM_DESCRIPTION,ECU_SYSTEM_DESCRIPTION, SW_CLUSTER_SYSTEM_DESCRIPTION, RPT_SYSTEM)→ Save. Add Number of Root Composition → Short Name → Select Composition SW Component Type → Save. Add Number of SWC To ECU Mappings → Select ECU → Select Root Component → Select Application SW Component → Target Component Name → Save it. Fig. System","keywords":"AUTOSAR System Configuration Root Composition SWC to ECU Mappings Software Components ECU Architecture","version":"Next"},{"title":"Switches","type":0,"sectionRef":"#","url":"/switches/","content":"","keywords":"AUTOSAR Switch Configuration Coupling Elements Ethernet Clusters VLANs ECU Communication","version":"Next"},{"title":"10.1 Coupling Elements​","type":1,"pageTitle":"Switches","url":"/switches/#coupling-elements","content":" A CouplingElement is used to connect EcuInstances via CouplingPorts to EthernetPhysicalChannels (VLANs) that are defined within an EthernetCluster.  CouplingElements can reach from a simple hub to a complex managed switch or even devices with functionalities in higher layers.  A CouplingElement references the EthernetCluster and contains a collection of available CouplingPorts. The couplingType identifies the CouplingElement as a switch, hub or router.  Add Number of Switches→ Short Name → Switch Type( HUB,ROUTER,SWITCH) → Cluster Name → Select Ethernet Cluster→ ECU Name → Select ECU → Save. Add Number of Coupling Ports→ Short Name→ Connection Negotiation Behavior (AUTO, MASTER,SLAVE)→Coupling Port Role (HOSTPORT, STANDARD PORT, UPLINK PORT)→ Coupling Port Speed → MAC Layer Type(XMII, XGMII, XXGMII)→Physical Layer Type→ Receive Activity(DROP UNTAGGED, FORWARDASIS) → Save. Add Number of VLAN Memberships → Select VLAN Channel → Default Priority (0 to 7) → Send Activity ( NOTSENT, SENT TAGGED, SENTUNTAGGED)→ Channel Name → VLAN Identifier → Save.  Fig. Switches(Coupling Elements) ","version":"Next","tagName":"h2"},{"title":"5.10 User Defined PDUs","type":0,"sectionRef":"#","url":"/pdus/user-defined-pdus/","content":"5.10 User Defined PDUs User Defined PDU allows to describe PDU-based communication over Complex Drivers. If a new BSW module is added above the BusIf (e.g. a new Nm module) then this PDU element shall be used to describe the communication. Add User Defined PDU → Short Name → Length → Save. Fig. User Defined PDUs","keywords":"User Defined PDU AUTOSAR ARXML Short Name Length Custom Protocol Data Units","version":"Next"},{"title":"Welcome to the EEA COM documentation","type":0,"sectionRef":"#","url":"/","content":"","keywords":"eeacom eeacom-docs EEA COM AUTOSAR ECU Communication Communication Matrix Documentation CAN Cluster Ethernet Cluster LIN Cluster FlexRay Cluster J1939 Protocol Data Units Signals Data Types Software Components","version":"Next"},{"title":"Contents:​","type":1,"pageTitle":"Welcome to the EEA COM documentation","url":"/#contents","content":" 1. Introduction​ 1.1 Features1.2 EEA Com UI1.3 Application Areas1.4 File Menu1.5 Tool Menu1.6 Panels1.7 Modification Buttons 2. Cluster​ 2.1 CAN/CAN FD Cluster2.2 Ethernet Cluster2.3 LIN Cluster2.4 FlexRay Cluster2.5 J1939 Cluster 3. ECU​ 4. Frames​ 4.1 CAN Frames4.2 LIN Sporadic Frames4.3 LIN Unconditional Frames4.4 LIN Event Triggered Frames4.5 FlexRay Frames4.6 Ethernet Frames 5. PDUs (Protocol Data Units)​ 5.1 I Signal I PDUs5.2 DCM I PDUs5.3 Container I PDUs5.4 General Purpose PDUs5.5 J1939 DCM I PDUs5.6 Multiplexed I PDUs5.7 NM PDUs5.8 N PDUs5.9 Secured I PDUs5.10 User Defined PDUs5.11 XCP PDUs5.12 Secure Communication Props Set 6. Signals​ 6.1 I Signals6.2 I Signals Group 7. Data Types​ 7.1 Data Constraints7.2 Application Data Type (Array)7.3 Compute Method7.4 Base Type7.5 Implementation Data Type7.6 Application Data Type (Basic)7.7 Application Data Type (Structure) 8. Methods and Events​ 8.1 Methods8.2 Events 9. Software Components​ 9.1 Data Transformation Set9.2 Application SW Component Type9.3 Composition SW Component Type9.4 System 10. Switches​ 10.1 Coupling Elements 11. Gateway​ ","version":"Next","tagName":"h2"}],"options":{"indexBaseUrl":true,"id":"default"}}